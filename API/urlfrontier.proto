/**
 * Licensed to Crawler-Commons under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * DigitalPebble licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_package = "crawlercommons.urlfrontier";

package urlfrontier;

service URLFrontier {
  /** Return the names of up to N active queues
      a queue is active if it has URLs due for fetching
  **/
     rpc ListQueues(GetParams) returns (StringList) {}

  /** stream URLs due for fetching from M queues with up to N items per queue **/
     rpc GetURLs(GetParams) returns (stream URLItem) {}

  /** update / create a batch of URLs **/
     rpc PutURLs(stream URLItem) returns (stream String) {}

 /** return stats for a specific queue or the whole crawl if the value if empty or null **/
     rpc GetStats(String) returns (Stats) {}
     
     /** Delete  the queue based on the key in parameter **/
     rpc DeleteQueue(String) returns (Empty) {}

}


message Stats {
  uint32 size = 1;
  uint32 inProcess = 2;
  map<string, uint32> counts = 3;
  uint32 numberOfQueues = 4;
}

message Empty {
}

message Boolean {
  bool state = 1;
}

message String {
  string value = 1;
}

message StringList {
  repeated string values = 1;
}

message GetParams {
  uint32 max_urls_per_queue = 1;
  uint32 max_queues = 2;
  string key = 3;
  // delay_requestable applies to search - amount of time before a URL can be unlocked and sent again for fetching 
  uint32 delay_requestable = 4;
}

message URLItem {
  string url = 1;
  string key = 2;
  enum Status {
    DISCOVERED = 0;
    FETCHED = 1;
    REDIRECTION = 2;
    FETCH_ERROR = 3;
    ERROR = 4;
  }
  
  
  Status status = 3;
  /** Expressed in seconds of UTC time since Unix epoch
      1970-01-01T00:00:00Z. The default value of 0 indicates
      that a URL should not be refetched if its status is not 
      DISCOVERED or otherwise that it should be fetched whenever possible. 
  **/
  uint64 next_fetch_date = 4;
  map<string, StringList> metadata = 5;
}

